
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__CommandInterfaceProxy_h__PROXY_MARSHAL_H
#define __dbusxx__CommandInterfaceProxy_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace genivi {
namespace audiomanager {

class commandinterface_proxy
: public ::DBus::InterfaceProxy
{
public:

    commandinterface_proxy()
    : ::DBus::InterfaceProxy("org.genivi.audiomanager.commandinterface")
    {
        connect_signal(commandinterface_proxy, NewMainConnection, _NewMainConnection_stub);
        connect_signal(commandinterface_proxy, RemovedMainConnection, _RemovedMainConnection_stub);
        connect_signal(commandinterface_proxy, SinkAdded, _SinkAdded_stub);
        connect_signal(commandinterface_proxy, SinkRemoved, _SinkRemoved_stub);
        connect_signal(commandinterface_proxy, SourceAdded, _SourceAdded_stub);
        connect_signal(commandinterface_proxy, SourceRemoved, _SourceRemoved_stub);
        connect_signal(commandinterface_proxy, NumberOfSinkClassesChanged, _NumberOfSinkClassesChanged_stub);
        connect_signal(commandinterface_proxy, NumberOfSourceClassesChanged, _NumberOfSourceClassesChanged_stub);
        connect_signal(commandinterface_proxy, MainConnectionStateChanged, _MainConnectionStateChanged_stub);
        connect_signal(commandinterface_proxy, MainSinkSoundPropertyChanged, _MainSinkSoundPropertyChanged_stub);
        connect_signal(commandinterface_proxy, MainSourceSoundPropertyChanged, _MainSourceSoundPropertyChanged_stub);
        connect_signal(commandinterface_proxy, SinkAvailabilityChanged, _SinkAvailabilityChanged_stub);
        connect_signal(commandinterface_proxy, SourceAvailabilityChanged, _SourceAvailabilityChanged_stub);
        connect_signal(commandinterface_proxy, VolumeChanged, _VolumeChanged_stub);
        connect_signal(commandinterface_proxy, SinkMuteStateChanged, _SinkMuteStateChanged_stub);
        connect_signal(commandinterface_proxy, SystemPropertyChanged, _SystemPropertyChanged_stub);
        connect_signal(commandinterface_proxy, TimingInformationChanged, _TimingInformationChanged_stub);
        connect_signal(commandinterface_proxy, SinkUpdated, _SinkUpdated_stub);
        connect_signal(commandinterface_proxy, SourceUpdated, _SourceUpdated_stub);
        connect_signal(commandinterface_proxy, SourceNotification, _SourceNotification_stub);
        connect_signal(commandinterface_proxy, SinkNotification, _SinkNotification_stub);
        connect_signal(commandinterface_proxy, SinkMainNotificationConfigurationChanged, _SinkMainNotificationConfigurationChanged_stub);
        connect_signal(commandinterface_proxy, SourceMainNotificationConfigurationChanged, _SourceMainNotificationConfigurationChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Connect(const uint16_t& sourceID, const uint16_t& sinkID, int16_t& result, uint16_t& mainConnectionID)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sourceID;
        wi << sinkID;
        call.member("Connect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> result;
        ri >> mainConnectionID;
    }

    int16_t Disconnect(const uint16_t& mainConnectionID)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mainConnectionID;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int16_t argout;
        ri >> argout;
        return argout;
    }

    int16_t SetVolume(const uint16_t& sinkID, const int16_t& volume)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sinkID;
        wi << volume;
        call.member("SetVolume");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int16_t argout;
        ri >> argout;
        return argout;
    }

    int16_t VolumeStep(const uint16_t& sinkID, const int16_t& volumeStep)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sinkID;
        wi << volumeStep;
        call.member("VolumeStep");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int16_t argout;
        ri >> argout;
        return argout;
    }

    int16_t SetSinkMuteState(const uint16_t& sinkID, const int16_t& muteState)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sinkID;
        wi << muteState;
        call.member("SetSinkMuteState");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int16_t argout;
        ri >> argout;
        return argout;
    }

    int16_t SetMainSinkSoundProperty(const uint16_t& sinkID, const ::DBus::Struct< int16_t, int16_t >& soundProperty)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sinkID;
        wi << soundProperty;
        call.member("SetMainSinkSoundProperty");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int16_t argout;
        ri >> argout;
        return argout;
    }

    int16_t SetMainSourceSoundProperty(const uint16_t& sourceID, const ::DBus::Struct< int16_t, int16_t >& soundProperty)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sourceID;
        wi << soundProperty;
        call.member("SetMainSourceSoundProperty");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int16_t argout;
        ri >> argout;
        return argout;
    }

    int16_t SetSystemProperty(const ::DBus::Struct< int16_t, int16_t >& property)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << property;
        call.member("SetSystemProperty");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int16_t argout;
        ri >> argout;
        return argout;
    }

    void GetListMainConnections(int16_t& result, std::vector< ::DBus::Struct< uint16_t, uint16_t, uint16_t, int16_t, int16_t > >& listConnections)
    {
        ::DBus::CallMessage call;
        call.member("GetListMainConnections");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> result;
        ri >> listConnections;
    }

    void GetListMainSinks(int16_t& result, std::vector< ::DBus::Struct< uint16_t, std::string, ::DBus::Struct< int16_t, int16_t >, int16_t, int16_t, uint16_t > >& listMainSinks)
    {
        ::DBus::CallMessage call;
        call.member("GetListMainSinks");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> result;
        ri >> listMainSinks;
    }

    void GetListMainSources(int16_t& result, std::vector< ::DBus::Struct< uint16_t, std::string, ::DBus::Struct< int16_t, int16_t >, uint16_t > >& listMainSources)
    {
        ::DBus::CallMessage call;
        call.member("GetListMainSources");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> result;
        ri >> listMainSources;
    }

    void GetListMainSinkSoundProperties(const uint16_t& sinkID, int16_t& result, std::vector< ::DBus::Struct< int16_t, int16_t > >& listSoundProperties)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sinkID;
        call.member("GetListMainSinkSoundProperties");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> result;
        ri >> listSoundProperties;
    }

    void GetListMainSourceSoundProperties(const uint16_t& sourceID, int16_t& result, std::vector< ::DBus::Struct< int16_t, int16_t > >& listSourceProperties)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sourceID;
        call.member("GetListMainSourceSoundProperties");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> result;
        ri >> listSourceProperties;
    }

    void GetListSourceClasses(int16_t& result, std::vector< ::DBus::Struct< uint16_t, std::string, std::vector< ::DBus::Struct< int16_t, int16_t > > > >& listSourceClasses)
    {
        ::DBus::CallMessage call;
        call.member("GetListSourceClasses");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> result;
        ri >> listSourceClasses;
    }

    void GetListSinkClasses(int16_t& result, std::vector< ::DBus::Struct< uint16_t, std::string, std::vector< ::DBus::Struct< int16_t, int16_t > > > >& listSinkClasses)
    {
        ::DBus::CallMessage call;
        call.member("GetListSinkClasses");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> result;
        ri >> listSinkClasses;
    }

    void GetListSystemProperties(int16_t& result, std::vector< ::DBus::Struct< int16_t, int16_t > >& listSystemProperties)
    {
        ::DBus::CallMessage call;
        call.member("GetListSystemProperties");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> result;
        ri >> listSystemProperties;
    }

    void GetTimingInformation(const uint16_t& mainConnectionID, int16_t& result, int16_t& delay)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mainConnectionID;
        call.member("GetTimingInformation");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> result;
        ri >> delay;
    }

    void GetListSinkMainNotificationConfigurations(const uint16_t& sinkID, int16_t& result, std::vector< ::DBus::Struct< int16_t, int16_t, int16_t > >& listMainNotificationConfigurations)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sinkID;
        call.member("GetListSinkMainNotificationConfigurations");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> result;
        ri >> listMainNotificationConfigurations;
    }

    void GetListSourceMainNotificationConfigurations(const uint16_t& sourceID, int16_t& result, std::vector< ::DBus::Struct< int16_t, int16_t, int16_t > >& listMainNotificationConfigurations)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sourceID;
        call.member("GetListSourceMainNotificationConfigurations");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> result;
        ri >> listMainNotificationConfigurations;
    }

    int16_t setMainSinkNotificationConfiguration(const uint16_t& sinkID, const ::DBus::Struct< int16_t, int16_t, int16_t >& mainNotificationConfiguration)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sinkID;
        wi << mainNotificationConfiguration;
        call.member("setMainSinkNotificationConfiguration");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int16_t argout;
        ri >> argout;
        return argout;
    }

    int16_t setMainSourceNotificationConfiguration(const uint16_t& sourceID, const ::DBus::Struct< int16_t, int16_t, int16_t >& mainNotificationConfiguration)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sourceID;
        wi << mainNotificationConfiguration;
        call.member("setMainSourceNotificationConfiguration");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int16_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void NewMainConnection(const ::DBus::Struct< uint16_t, uint16_t, uint16_t, int16_t, int16_t >& mainConnection) = 0;
    virtual void RemovedMainConnection(const uint16_t& mainConnectionId) = 0;
    virtual void SinkAdded(const ::DBus::Struct< uint16_t, std::string, ::DBus::Struct< int16_t, int16_t >, int16_t, int16_t, uint16_t >& newSink) = 0;
    virtual void SinkRemoved(const uint16_t& removedSinkID) = 0;
    virtual void SourceAdded(const ::DBus::Struct< uint16_t, std::string, ::DBus::Struct< int16_t, int16_t >, uint16_t >& newSource) = 0;
    virtual void SourceRemoved(const uint16_t& removedSourceID) = 0;
    virtual void NumberOfSinkClassesChanged() = 0;
    virtual void NumberOfSourceClassesChanged() = 0;
    virtual void MainConnectionStateChanged(const uint16_t& connectionID, const int16_t& connectionState) = 0;
    virtual void MainSinkSoundPropertyChanged(const uint16_t& sinkID, const ::DBus::Struct< int16_t, int16_t >& SoundProperty) = 0;
    virtual void MainSourceSoundPropertyChanged(const uint16_t& sourceID, const ::DBus::Struct< int16_t, int16_t >& SoundProperty) = 0;
    virtual void SinkAvailabilityChanged(const uint16_t& sinkID, const ::DBus::Struct< int16_t, int16_t >& availability) = 0;
    virtual void SourceAvailabilityChanged(const uint16_t& sourceID, const ::DBus::Struct< int16_t, int16_t >& availability) = 0;
    virtual void VolumeChanged(const uint16_t& sinkID, const int16_t& volume) = 0;
    virtual void SinkMuteStateChanged(const uint16_t& sinkID, const int16_t& muteState) = 0;
    virtual void SystemPropertyChanged(const ::DBus::Struct< int16_t, int16_t >& SystemProperty) = 0;
    virtual void TimingInformationChanged(const uint16_t& mainConnection, const int16_t& time) = 0;
    virtual void SinkUpdated(const uint16_t& sinkID, const uint16_t& sinkClassID, const std::vector< ::DBus::Struct< int16_t, int16_t > >& listMainSinkProperties) = 0;
    virtual void SourceUpdated(const uint16_t& sourceID, const uint16_t& sourceClassID, const std::vector< ::DBus::Struct< int16_t, int16_t > >& listMainSinkProperties) = 0;
    virtual void SourceNotification(const uint16_t& sourceID, const ::DBus::Struct< int16_t, int16_t >& notificationPayload) = 0;
    virtual void SinkNotification(const uint16_t& sinkID, const ::DBus::Struct< int16_t, int16_t >& notificationPayload) = 0;
    virtual void SinkMainNotificationConfigurationChanged(const uint16_t& sinkID, const ::DBus::Struct< int16_t, int16_t, int16_t >& mainNotificationConfiguration) = 0;
    virtual void SourceMainNotificationConfigurationChanged(const uint16_t& sourceID, const ::DBus::Struct< int16_t, int16_t, int16_t >& mainNotificationConfiguration) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _NewMainConnection_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint16_t, uint16_t, uint16_t, int16_t, int16_t > mainConnection;
        ri >> mainConnection;
        NewMainConnection(mainConnection);
    }
    void _RemovedMainConnection_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t mainConnectionId;
        ri >> mainConnectionId;
        RemovedMainConnection(mainConnectionId);
    }
    void _SinkAdded_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint16_t, std::string, ::DBus::Struct< int16_t, int16_t >, int16_t, int16_t, uint16_t > newSink;
        ri >> newSink;
        SinkAdded(newSink);
    }
    void _SinkRemoved_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t removedSinkID;
        ri >> removedSinkID;
        SinkRemoved(removedSinkID);
    }
    void _SourceAdded_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint16_t, std::string, ::DBus::Struct< int16_t, int16_t >, uint16_t > newSource;
        ri >> newSource;
        SourceAdded(newSource);
    }
    void _SourceRemoved_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t removedSourceID;
        ri >> removedSourceID;
        SourceRemoved(removedSourceID);
    }
    void _NumberOfSinkClassesChanged_stub(const ::DBus::SignalMessage&)
    {
        NumberOfSinkClassesChanged();
    }
    void _NumberOfSourceClassesChanged_stub(const ::DBus::SignalMessage&)
    {
        NumberOfSourceClassesChanged();
    }
    void _MainConnectionStateChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t connectionID;
        ri >> connectionID;
        int16_t connectionState;
        ri >> connectionState;
        MainConnectionStateChanged(connectionID, connectionState);
    }
    void _MainSinkSoundPropertyChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t sinkID;
        ri >> sinkID;
        ::DBus::Struct< int16_t, int16_t > SoundProperty;
        ri >> SoundProperty;
        MainSinkSoundPropertyChanged(sinkID, SoundProperty);
    }
    void _MainSourceSoundPropertyChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t sourceID;
        ri >> sourceID;
        ::DBus::Struct< int16_t, int16_t > SoundProperty;
        ri >> SoundProperty;
        MainSourceSoundPropertyChanged(sourceID, SoundProperty);
    }
    void _SinkAvailabilityChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t sinkID;
        ri >> sinkID;
        ::DBus::Struct< int16_t, int16_t > availability;
        ri >> availability;
        SinkAvailabilityChanged(sinkID, availability);
    }
    void _SourceAvailabilityChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t sourceID;
        ri >> sourceID;
        ::DBus::Struct< int16_t, int16_t > availability;
        ri >> availability;
        SourceAvailabilityChanged(sourceID, availability);
    }
    void _VolumeChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t sinkID;
        ri >> sinkID;
        int16_t volume;
        ri >> volume;
        VolumeChanged(sinkID, volume);
    }
    void _SinkMuteStateChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t sinkID;
        ri >> sinkID;
        int16_t muteState;
        ri >> muteState;
        SinkMuteStateChanged(sinkID, muteState);
    }
    void _SystemPropertyChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int16_t, int16_t > SystemProperty;
        ri >> SystemProperty;
        SystemPropertyChanged(SystemProperty);
    }
    void _TimingInformationChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t mainConnection;
        ri >> mainConnection;
        int16_t time;
        ri >> time;
        TimingInformationChanged(mainConnection, time);
    }
    void _SinkUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t sinkID;
        ri >> sinkID;
        uint16_t sinkClassID;
        ri >> sinkClassID;
        std::vector< ::DBus::Struct< int16_t, int16_t > > listMainSinkProperties;
        ri >> listMainSinkProperties;
        SinkUpdated(sinkID, sinkClassID, listMainSinkProperties);
    }
    void _SourceUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t sourceID;
        ri >> sourceID;
        uint16_t sourceClassID;
        ri >> sourceClassID;
        std::vector< ::DBus::Struct< int16_t, int16_t > > listMainSinkProperties;
        ri >> listMainSinkProperties;
        SourceUpdated(sourceID, sourceClassID, listMainSinkProperties);
    }
    void _SourceNotification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t sourceID;
        ri >> sourceID;
        ::DBus::Struct< int16_t, int16_t > notificationPayload;
        ri >> notificationPayload;
        SourceNotification(sourceID, notificationPayload);
    }
    void _SinkNotification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t sinkID;
        ri >> sinkID;
        ::DBus::Struct< int16_t, int16_t > notificationPayload;
        ri >> notificationPayload;
        SinkNotification(sinkID, notificationPayload);
    }
    void _SinkMainNotificationConfigurationChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t sinkID;
        ri >> sinkID;
        ::DBus::Struct< int16_t, int16_t, int16_t > mainNotificationConfiguration;
        ri >> mainNotificationConfiguration;
        SinkMainNotificationConfigurationChanged(sinkID, mainNotificationConfiguration);
    }
    void _SourceMainNotificationConfigurationChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t sourceID;
        ri >> sourceID;
        ::DBus::Struct< int16_t, int16_t, int16_t > mainNotificationConfiguration;
        ri >> mainNotificationConfiguration;
        SourceMainNotificationConfigurationChanged(sourceID, mainNotificationConfiguration);
    }
};

} } } 
#endif //__dbusxx__CommandInterfaceProxy_h__PROXY_MARSHAL_H
